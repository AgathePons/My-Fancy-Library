const { Op } = require('sequelize');
const {
  Author,
  Category,
  Edition
} = require('../models/');

const adminController = {
  adminPage: (_req, res) => {
    res.render('adminPage', {
      title: 'Administration ‚ú®'
    });
  },
  // #region Author
  editAuthorPage: async (_req, res) => {
    try {
      const authors = await Author.findAll({
        include: 'books'
      });
      res.render('adminAuthorEdit', {
        title: 'G√©rer les auteur¬∑e¬∑s ‚ú®',
        authors
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  editAuthorAction : async (req, res) => {
    try {
      // check if id author exists
      const author = await Author.findByPk(req.params.id);
      const prevName = author.fullname;
      if (!author) {
        return res.render('adminAuthorEdit', {
          title: 'Ooopsi üò±',
          error: `L'auteur¬∑e ayant "${req.params.id}" pour id n'existe pas !`
        });
      }
      if(req.body.firstname) {
        author.firstname = req.body.firstname;
      }
      if(req.body.lastname) {
        author.lastname = req.body.lastname;
      }
      await author.save();
      const authors = await Author.findAll();
      return res.render('adminAuthorEdit', {
        title: 'G√©rer les auteur¬∑e¬∑s ‚ú®',
        info: `L'auteur¬∑e ${prevName} a bien √©t√© transform√© en ${author.fullname} !`,
        authors
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  deleteAuthorAction: async (req, res) => {
    try {
      // check if id author exists
      const author = await Author.findByPk(req.params.id);
      if (!author) {
        return res.render('adminAuthorEdit', {
          title: 'Ooopsi üò±',
          error: `L'auteur¬∑e ayant "${req.params.id}" pour id n'existe pas !`
        });
      }
      await author.destroy();
      const authors = await Author.findAll();
      return res.render('adminAuthorEdit', {
        title: 'G√©rer les auteur¬∑e¬∑s ‚ú®',
        info: `L'auteur¬∑e ${author.fullname} a bien √©t√© jet√© dans la grande poubelle litt√©raire !`,
        authors
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  addAuthorPage: (_req, res) => {
    res.render('adminAuthorAdd', {
      title: 'Ajouter un¬∑e auteur¬∑e ‚ú®'
    });
  },
  addAuthorAction: async (req, res) => {
    try {
      // check if author already exists
      const author = await Author.findOne({
        where: {
          [Op.and]: [
            {firstname: req.body.firstname},
            {lastname: req.body.lastname}
          ]
        }
      });
      if (author) {
        return res.render('adminAuthorAdd', {
          title: 'Ooopsi üò±',
          error: 'Cet¬∑te auteur¬∑e existe d√©j√† !'
        });
      }
      const newAuthor = await Author.create({
        firstname: req.body.firstname,
        lastname: req.body.lastname
      });
      const authors = await Author.findAll();
      return res.render('adminAuthorEdit', {
        title: 'G√©rer les auteur¬∑e¬∑s ‚ú®',
        info: `L'auteur¬∑e ${newAuthor.fullname} a bien √©t√© invent√© !`,
        authors
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  // #endregion Author
  // #region Category
  editCategoryPage: async (_req, res) => {
    try {
      const categories = await Category.findAll({
        include: 'books'
      });
      res.render('adminCategoryEdit', {
        title: 'G√©rer les genres litt√©raires ‚ú®',
        categories
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  editCategoryAction : async (req, res) => {
    try {
      // check if id category exists
      const category = await Category.findByPk(req.params.id);
      const prevName = category.name;
      if (!category) {
        return res.render('adminCategoryEdit', {
          title: 'Ooopsi üò±',
          error: `Le genre litt√©raire ayant "${req.params.id}" pour id n'existe pas !`
        });
      }
      if(req.body.name) {
        category.name = req.body.name;
      }
      await category.save();
      const categories = await Category.findAll();
      return res.render('adminCategoryEdit', {
        title: 'G√©rer les genres litt√©raires ‚ú®',
        info: `Le genre litt√©raire ${prevName} a bien √©t√© transform√© en ${category.name} !`,
        categories
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  deleteCategoryAction: async (req, res) => {
    try {
      // check if id category exists
      const category = await Category.findByPk(req.params.id);
      if (!category) {
        return res.render('adminCategoryEdit', {
          title: 'Ooopsi üò±',
          error: `Le genre litt√©raire ayant "${req.params.id}" pour id n'existe pas !`
        });
      }
      await category.destroy();
      const categories = await Category.findAll();
      return res.render('adminCategoryEdit', {
        title: 'G√©rer les genres litt√©raires ‚ú®',
        info: `Le genre litt√©raire ${category.name} a bien √©t√© jet√© dans la grande poubelle litt√©raire !`,
        categories
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  addCategoryPage: (_req, res) => {
    res.render('adminCategoryAdd', {
      title: 'Ajouter un genre litt√©raire ‚ú®'
    });
  },
  addCategoryAction: async (req, res) => {
    try {
      // check if category already exists
      const category = await Category.findOne({
        where: {
          name: req.body.name
        }
      });
      if (category) {
        return res.render('adminCategoryAdd', {
          title: 'Ooopsi üò±',
          error: 'Ce genre litt√©raire existe d√©j√† !'
        });
      }
      const newCategory = await Category.create({
        name: req.body.name
      });
      const categories = await Category.findAll();
      return res.render('adminCategoryEdit', {
        title: 'G√©rer les genres litt√©raires ‚ú®',
        info: `Le genre litt√©raire ${newCategory.name} a bien √©t√© invent√© !`,
        categories
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  // #endregion Category
  // #region Edition
  editEditionPage: async (_req, res) => {
    try {
      const editions = await Edition.findAll({
        include: 'books'
      });
      res.render('adminEditionEdit', {
        title: 'G√©rer les genres maisons d\'√©dition ‚ú®',
        editions
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  editEditionAction : async (req, res) => {
    try {
      // check if id category exists
      const edition = await Edition.findByPk(req.params.id);
      const prevName = edition.name;
      if (!edition) {
        return res.render('adminEditionEdit', {
          title: 'Ooopsi üò±',
          error: `La maison d'√©dition ayant "${req.params.id}" pour id n'existe pas !`
        });
      }
      if(req.body.name) {
        edition.name = req.body.name;
      }
      await edition.save();
      const editions = await Edition.findAll();
      return res.render('adminEditionEdit', {
        title: 'G√©rer les maison d\'√©dition ‚ú®',
        info: `La maison d'√©dition ${prevName} a bien √©t√© transform√©e en ${edition.name} !`,
        editions
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  deleteEditionAction: async (req, res) => {
    try {
      // check if id category exists
      const edition = await Edition.findByPk(req.params.id);
      if (!edition) {
        return res.render('adminEditionEdit', {
          title: 'Ooopsi üò±',
          error: `La maison d'√©dition ayant "${req.params.id}" pour id n'existe pas !`
        });
      }
      await edition.destroy();
      const editions = await Edition.findAll();
      return res.render('adminEditionEdit', {
        title: 'G√©rer les maison d\'√©dition ‚ú®',
        info: `La maison d'√©dition ${edition.name} a bien √©t√© jet√© dans la grande poubelle litt√©raire !`,
        editions
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  },
  addEditionPage: (_req, res) => {
    res.render('adminEditionAdd', {
      title: 'Ajouter une maison d\'√©dition ‚ú®'
    });
  },
  addEditionAction: async (req, res) => {
    try {
      // check if edition already exists
      const edition = await Edition.findOne({
        where: {
          name: req.body.name
        }
      });
      if (edition) {
        return res.render('adminEditionAdd', {
          title: 'Ooopsi üò±',
          error: 'Cette maison d\'√©dition existe d√©j√† !'
        });
      }
      const newEdition = await Edition.create({
        name: req.body.name
      });
      const editions = await Edition.findAll();
      return res.render('adminEditionEdit', {
        title: 'G√©rer les maisons d\'√©dition ‚ú®',
        info: `La maison d'√©dition ${newEdition.name} a bien √©t√© invent√© !`,
        editions
      });
    } catch (err) {
      console.error('Error:', err);
      res.status(500).send('There is an error 500:', err);
    }
  }
  // #endregion Edition
};

module.exports = adminController;